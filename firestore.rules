rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
// Règles pour la collection Products
   match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
    // Règles pour la collection Organisations
    match /organisations/{organisationId} {
      // Permettre la création d'une organisation par tout utilisateur authentifié
      allow create: if request.auth != null;
      // Autoriser la lecture des organisations à tous les utilisateurs authentifiés
      allow read: if request.auth != null;
      // Autoriser la mise à jour et la suppression uniquement si l'utilisateur est le créateur ou admin
      allow update, delete: if request.auth != null && (
        resource.data.createBy == request.auth.uid || (
          exists(/databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + organisationId)) &&
          get(/databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + organisationId)).data.isAdmin == true
        )
      );

            // Sous-collection "credits" pour une entreprise
      match /credits/{creditId} {
        // Lecture des crédits autorisée pour tout utilisateur authentifié
        allow read: if request.auth != null;

        // Interdiction de toute modification directe par le client
        allow write, update, delete: if false;
      }
    }

    // Règles pour la collection Users
    match /users/{usersId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }

    // Règles pour la collection userOrganisationRelation
    match /userOrganisationRelation/{relationId} {
      // Autoriser la création de relations utilisateur-organisation
      allow create, update, delete: if request.auth != null && (
        // L'utilisateur est le créateur de l'organisation
        exists(/databases/$(database)/documents/organisations/$(request.resource.data.organisationId)) &&
        get(/databases/$(database)/documents/organisations/$(request.resource.data.organisationId)).data.createBy == request.auth.uid ||
        
        // L'utilisateur est admin dans l'organisation
        exists(
          /databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + request.resource.data.organisationId)
        ) &&
        get(/databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + request.resource.data.organisationId)).data.isAdmin == true
      );
      
      // Autoriser la lecture uniquement aux utilisateurs concernés
      allow read: if request.auth != null &&
        (resource.data.userId == request.auth.uid || 
         exists(/databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + resource.data.organisationId)) &&
         get(/databases/$(database)/documents/userOrganisationRelation/$(request.auth.uid + '_' + resource.data.organisationId)).data.isAdmin == true);
    }

    // Règles pour la collection feedbacks
    match /feedbacks/{feedbackId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAdminForFeedback(request.auth.uid, request.resource.data.organisationId);
      allow update, delete: if request.auth != null && isAdminForFeedback(request.auth.uid, request.resource.data.organisationId);

      // Règles pour la collection questions nested dans feedbacks
      match /questions/{questionId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && isAdminForFeedback(request.auth.uid, get(/databases/$(database)/documents/feedbacks/$(feedbackId)).data.organisationId);
        allow update, delete: if request.auth != null && isAdminForFeedback(request.auth.uid, get(/databases/$(database)/documents/feedbacks/$(feedbackId)).data.organisationId);
      }
    }


    match /responses/{responseId} {
      
      // Autoriser la lecture seulement si l'utilisateur est authentifié
      allow read: if true;

      // Autoriser la création de réponses si l'utilisateur est authentifié et l'userId de la requête correspond à l'ID utilisateur authentifié
      allow create: if true;

      // Autoriser la mise à jour si l'utilisateur est authentifié et l'userId du document correspond à l'ID utilisateur authentifié
      allow update: if true;

      // Autoriser la suppression si l'utilisateur est authentifié et l'userId du document correspond à l'ID utilisateur authentifié
      allow delete: if true;
    }



    // Fonction pour vérifier si l'utilisateur est admin pour une organisation donnée
    function isAdmin(userId, organisationId) {
      return exists(/databases/$(database)/documents/userOrganisationRelation/$(userId + '_' + organisationId))
        && get(/databases/$(database)/documents/userOrganisationRelation/$(userId + '_' + organisationId)).data.isAdmin == true;
    }

    // Fonction pour vérifier si l'utilisateur est admin pour le feedback (en se basant sur l'organisation liée)
    function isAdminForFeedback(userId, organisationId) {
      return isAdmin(userId, organisationId);
    }

  }
}
